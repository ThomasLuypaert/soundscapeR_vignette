div.vector <- c()
for (i in c(1:(leveln+1))){
if(i == 1){
#If lowest level
if(missing(tree)){
div.vector <- c(div.vector,alpha_div(count.tables[[1]],qvalue))
}else{
div.vector <- c(div.vector,alpha_div(count.tables[[1]],qvalue,tree))
}
}else if(i == leveln+1){
#If highest level
if(missing(tree)){
div.vector <- c(div.vector,gamma_div(count.tables[[1]],qvalue))
}else{
div.vector <- c(div.vector,gamma_div(count.tables[[1]],qvalue,tree))
}
}else{
#Intermediate level
if(missing(tree)){
div.vector <- c(div.vector,alpha_div(count.tables[[i]],qvalue))
}else{
div.vector <- c(div.vector,alpha_div(count.tables[[i]],qvalue,tree))
}
}
}
#Name levels
names(div.vector) <- levels
#Get beta values
beta.vector <- c()
N.vector <- c()
for(b in c(1:(leveln))){
beta <- div.vector[b+1]/div.vector[b]
names(beta) <- paste("B",paste(b,b+1,sep="_"),sep="")
beta.vector <- c(beta.vector,beta)
N <- ncol(count.tables[[b]])
N.vector <- c(N.vector,N)
}
N.vector <- c(N.vector,1)
names(N.vector) <- paste(rep("N",leveln+1),seq(1:(leveln+1)),sep="")
#Return values
if (qvalue==0.99999) {qvalue=1}
results <- list("Hierarchical_levels" = (leveln+1), "Order_diversity" = qvalue, "Hill_numbers"=div.vector, "Sample_size"=N.vector, "Beta"=beta.vector)
return(results)
}
}
div_part(countable = test, qvalue = 0, hierarchy_table)
div_part <- function(countable,qvalue,tree,hierarchy) {
#Quality-check and warnings
if(missing(countable)) stop("OTU table is missing")
if(is.null(dim(countable)) == TRUE) stop("The OTU table is not a matrix")
if(dim(countable)[1] < 2) stop("The OTU table only less than 2 OTUs")
if(dim(countable)[2] < 2) stop("The OTU table contains less than 2 samples")
if(sum(colSums(countable)) != ncol(countable)) {countable <- hilldiv::tss(countable)}
if(missing(qvalue)) stop("q value is missing")
if(qvalue < 0) stop("q value needs to be possitive (equal or higher than zero)")
if(qvalue==1) {qvalue=0.99999}
#####
# 2-level hierarchy (no hierarchy table)
#####
#Compute L1 and L2 diversities
if(missing(hierarchy)){
L1_div <- hilldiv::alpha_div(countable,qvalue)
L2_div <- hilldiv::gamma_div(countable,qvalue)
}
div.vector <- c(L1_div,L2_div)
names(div.vector) <- c("L1","L2")
#Beta
beta <- L2_div/L1_div
#Sample size
N <- c(N1=ncol(countable),N2=1)
#Return values
if (qvalue==0.99999) {qvalue=1}
results <- list("Hierarchical_levels" = 2, "Order_diversity" = qvalue, "Hill_numbers" = div.vector, "Sample_size" = N, "Beta" = beta)
return(results)
}
div_part <- function(countable,qvalue,tree,hierarchy) {
#Quality-check and warnings
if(missing(countable)) stop("OTU table is missing")
if(is.null(dim(countable)) == TRUE) stop("The OTU table is not a matrix")
if(dim(countable)[1] < 2) stop("The OTU table only less than 2 OTUs")
if(dim(countable)[2] < 2) stop("The OTU table contains less than 2 samples")
if(sum(colSums(countable)) != ncol(countable)) {countable <- hilldiv::tss(countable)}
if(missing(qvalue)) stop("q value is missing")
if(qvalue < 0) stop("q value needs to be possitive (equal or higher than zero)")
if(qvalue==1) {qvalue=0.99999}
#####
# 2-level hierarchy (no hierarchy table)
#####
#Compute L1 and L2 diversities
if(missing(hierarchy)){
L1_div <- hilldiv::alpha_div(countable,qvalue)
L2_div <- hilldiv::gamma_div(countable,qvalue)
div.vector <- c(L1_div,L2_div)
names(div.vector) <- c("L1","L2")
#Beta
beta <- L2_div/L1_div
#Sample size
N <- c(N1=ncol(countable),N2=1)
#Return values
if (qvalue==0.99999) {qvalue=1}
results <- list("Hierarchical_levels" = 2, "Order_diversity" = qvalue, "Hill_numbers" = div.vector, "Sample_size" = N, "Beta" = beta)
return(results)
}
#####
# Multi-level hierarchy (with hierarchy table)
#####
if(!missing(hierarchy)){
#Check nestedness of hierarchy
if(is.nested(hierarchy) == FALSE) stop("The groups in the hierarchy table are not nested.")
#Count number of levels
leveln <- ncol(hierarchy)
levels <- paste(rep("L",leveln+1),seq(1:(leveln+1)),sep="")
#Convert hierarchy columns to character
hierarchy <- apply(hierarchy,MARGIN = c(1,2), as.character)
colnames(hierarchy) <- levels[-length(levels)]
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- countable
countable.sub <- countable
for(i in c(2:leveln)){
countable.sub <- merge(t(countable.sub),unique(hierarchy[,c(i-1,i)]), by.x="row.names",by.y=as.character(levels[i-1]))
countable.sub <- countable.sub[,-1]
countable.sub <- aggregate(subset(countable.sub, select=rownames(countable)), by=list(countable.sub[,as.character(levels[i])]), FUN=sum)
rownames(countable.sub) <- countable.sub[,1]
countable.sub <- t(countable.sub[,-1])
count.tables[[i]] <- countable.sub
}
#Generate vector of diversities at different hierarchical levels
div.vector <- c()
for (i in c(1:(leveln+1))){
if(i == 1){
#If lowest level
div.vector <- c(div.vector,alpha_div(count.tables[[1]],qvalue))
}else if(i == leveln+1){
#If highest level
div.vector <- c(div.vector,gamma_div(count.tables[[1]],qvalue))
}else{
#Intermediate level
div.vector <- c(div.vector,alpha_div(count.tables[[i]],qvalue))
}
}
#Name levels
names(div.vector) <- levels
#Get beta values
beta.vector <- c()
N.vector <- c()
for(b in c(1:(leveln))){
beta <- div.vector[b+1]/div.vector[b]
names(beta) <- paste("B",paste(b,b+1,sep="_"),sep="")
beta.vector <- c(beta.vector,beta)
N <- ncol(count.tables[[b]])
N.vector <- c(N.vector,N)
}
N.vector <- c(N.vector,1)
names(N.vector) <- paste(rep("N",leveln+1),seq(1:(leveln+1)),sep="")
#Return values
if (qvalue==0.99999) {qvalue=1}
results <- list("Hierarchical_levels" = (leveln+1), "Order_diversity" = qvalue, "Hill_numbers"=div.vector, "Sample_size"=N.vector, "Beta"=beta.vector)
return(results)
}
}
div_part(countable = test, qvalue = 0, hierarchy_table)
View(hierarchy_table)
hierarchy_table <- as.matrix(
data.frame(Sample = c("Andre", "Mascote_A1", "Mascote_A2", "Mascote_B1", "Mascote_B2"),
grouping = c("A", "A", "B", "B","B")))
div_part(countable = test, qvalue = 0, hierarchy_table)
hierarchy_table <- as.matrix(
data.frame(Sample = c("Andre", "Mascote_A1", "Mascote_A2", "Mascote_B1", "Mascote_B2"),
grouping_1 = c("BB", "BB", "BB", "BB","BB"),
grouping_2 = c("A", "A", "B", "B", "B")))
div_part(countable = test, qvalue = 0, hierarchy_table)
leveln <- ncol(hierarchy_table)
levels <- paste(rep("L",leveln+1),seq(1:(leveln+1)),sep="")
#Convert hierarchy columns to character
hierarchy <- apply(hierarchy,MARGIN = c(1,2), as.character)
#Convert hierarchy columns to character
hierarchy_table <- apply(hierarchy_table,MARGIN = c(1,2), as.character)
View(hierarchy_table)
colnames(hierarchy) <- levels[-length(levels)]
colnames(hierarchy_table) <- levels[-length(levels)]
View(hierarchy_table)
hierarchy_table <- as.matrix(
data.frame(Sample = c("Andre", "Mascote_A1", "Mascote_A2", "Mascote_B1", "Mascote_B2"),
grouping_1 = c("A", "A", "B", "B", "B")))
leveln <- ncol(hierarchy_table)
levels <- paste(rep("L",leveln+1),seq(1:(leveln+1)),sep="")
#Convert hierarchy columns to character
hierarchy_table <- apply(hierarchy_table,MARGIN = c(1,2), as.character)
colnames(hierarchy_table) <- levels[-length(levels)]
View(hierarchy_table)
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
for(i in c(2:leveln)){
countable.sub <- merge(t(countable.sub),unique(hierarchy[,c(i-1,i)]), by.x="row.names",by.y=as.character(levels[i-1]))
countable.sub <- countable.sub[,-1]
countable.sub <- aggregate(subset(countable.sub, select=rownames(countable)), by=list(countable.sub[,as.character(levels[i])]), FUN=sum)
rownames(countable.sub) <- countable.sub[,1]
countable.sub <- t(countable.sub[,-1])
count.tables[[i]] <- countable.sub
}
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
for(i in c(2:leveln)){
countable.sub <- merge(t(countable.sub),unique(hierarchy_table[,c(i-1,i)]), by.x="row.names",by.y=as.character(levels[i-1]))
countable.sub <- countable.sub[,-1]
countable.sub <- aggregate(subset(countable.sub, select=rownames(countable)), by=list(countable.sub[,as.character(levels[i])]), FUN=sum)
rownames(countable.sub) <- countable.sub[,1]
countable.sub <- t(countable.sub[,-1])
count.tables[[i]] <- countable.sub
}
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
for(i in c(2:leveln)){
countable.sub <- merge(t(countable.sub),unique(hierarchy_table[,c(i-1,i)]), by.x="row.names",by.y=as.character(levels[i-1]))
countable.sub <- countable.sub[,-1]
countable.sub <- aggregate(subset(countable.sub, select=rownames(test)), by=list(countable.sub[,as.character(levels[i])]), FUN=sum)
rownames(countable.sub) <- countable.sub[,1]
countable.sub <- t(countable.sub[,-1])
count.tables[[i]] <- countable.sub
}
View(count.tables)
View(count.tables[[1]])
count.tables[[2]]
View(countable.sub)
leveln
unique(hierarchy_table[,c(1-1,1)])
unique(hierarchy_table[,c(2-1,2)])
countable.sub <- test
merge(t(countable.sub), unique(hierarchy_table[],c(1-1,1)]), by.x="row.names",by.y=as.character(levels[i-1]))
merge(t(countable.sub), unique(hierarchy_table[,c(1-1,1)]), by.x="row.names",by.y=as.character(levels[i-1]))
merge(t(countable.sub), unique(hierarchy_table[,c(1-1,1)]), by.x="row.names",by.y=as.character(levels[1-1]))
countable.sub <- test
merge(t(countable.sub), unique(hierarchy_table[,c(1-1,1)]), by.x="row.names",by.y=as.character(levels[1-1]))
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
rownames(countable.sub)
as.character(levels[i-1])
as.character(levels[1-1])
as.character(levels[2-1])
countable.sub <- merge(t(countable.sub),
unique(hierarchy_table[,c(2-1,2)]),
by.x="row.names",
by.y=as.character(levels[2-1]))
View(countable.sub)
leveln <- ncol(hierarchy_table)
levels <- paste(rep("L",leveln+1),seq(1:(leveln+1)),sep="")
#Convert hierarchy columns to character
hierarchy_table <- apply(hierarchy_table,MARGIN = c(1,2), as.character)
#Convert hierarchy columns to character
hierarchy_table <- apply(hierarchy_table,MARGIN = c(1,2), as.character)
colnames(hierarchy_table) <- levels[-length(levels)]
View(hierarchy_table)
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
View(countable.sub)
countable.sub <- merge(t(countable.sub),
unique(hierarchy_table[,c(2-1,2)]),
by.x="row.names",
by.y=as.character(levels[2-1]))
View(countable.sub)
countable.sub <- countable.sub[,-1]
View(countable.sub)
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
countable.sub <- merge(t(countable.sub),
unique(hierarchy_table[,c(2-1,2)]),
by.x="row.names",
by.y=as.character(levels[2-1]))
countable.sub <- countable.sub[,-1]
#Generate aggregated OTU tables
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
countable.sub <- merge(t(countable.sub),
unique(hierarchy_table[,c(2-1,2)]),
by.x="row.names",
by.y=as.character(levels[2-1]))
View(countable.sub)
countable.sub <- countable.sub[,-1]
list(countable.sub[,as.character(levels[2])])
rownames(test)
subset(countable.sub,
select=rownames(test)
subset(countable.sub,
select=rownames(test))
test_2 <- subset(countable.sub,
select=rownames(test))
View(test_2)
leveln
leveln <- ncol(hierarchy_table)
levels <- paste(rep("L",leveln+1),seq(1:(leveln+1)),sep="")
#Convert hierarchy columns to character
hierarchy_table <- apply(hierarchy_table,MARGIN = c(1,2), as.character)
colnames(hierarchy_table) <- levels[-length(levels)]
count.tables <- list()
count.tables[[1]] <- test
countable.sub <- test
for(i in c(2:leveln)){
countable.sub <- merge(t(countable.sub),unique(hierarchy_table[,c(i-1,i)]), by.x="row.names",by.y=as.character(levels[i-1]))
countable.sub <- countable.sub[,-1]
countable.sub <- aggregate(subset(countable.sub, select=rownames(test)), by=list(countable.sub[,as.character(levels[i])]), FUN=sum)
rownames(countable.sub) <- countable.sub[,1]
countable.sub <- t(countable.sub[,-1])
count.tables[[i]] <- countable.sub
}
View(countable.sub)
#Generate vector of diversities at different hierarchical levels
div.vector <- c()
leveln
for (i in c(1:(leveln+1))){
if(i == 1){
#If lowest level
div.vector <- c(div.vector,alpha_div(count.tables[[1]],qvalue))
}else if(i == leveln+1){
#If highest level
div.vector <- c(div.vector,gamma_div(count.tables[[1]],qvalue))
}else{
#Intermediate level
div.vector <- c(div.vector,alpha_div(count.tables[[i]],qvalue))
}
}
#Generate vector of diversities at different hierarchical levels
div.vector <- c()
for (i in c(1:(leveln+1))){
if(i == 1){
#If lowest level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[1]],qvalue))
}else if(i == leveln+1){
#If highest level
div.vector <- c(div.vector,hilldiv::gamma_div(count.tables[[1]],qvalue))
}else{
#Intermediate level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[i]],qvalue))
}
}
qvalue = 0
#Generate vector of diversities at different hierarchical levels
div.vector <- c()
for (i in c(1:(leveln+1))){
if(i == 1){
#If lowest level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[1]],qvalue))
}else if(i == leveln+1){
#If highest level
div.vector <- c(div.vector,hilldiv::gamma_div(count.tables[[1]],qvalue))
}else{
#Intermediate level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[i]],qvalue))
}
}
div.vector
#Name levels
names(div.vector) <- levels
#Get beta values
beta.vector <- c()
N.vector <- c()
for(b in c(1:(leveln))){
beta <- div.vector[b+1]/div.vector[b]
names(beta) <- paste("B",paste(b,b+1,sep="_"),sep="")
beta.vector <- c(beta.vector,beta)
N <- ncol(count.tables[[b]])
N.vector <- c(N.vector,N)
}
N.vector <- c(N.vector,1)
names(N.vector) <- paste(rep("N",leveln+1),seq(1:(leveln+1)),sep="")
N.vector
N.vector <- c(N.vector,1)
names(N.vector) <- paste(rep("N",leveln+1),seq(1:(leveln+1)),sep="")
#Return values
if (qvalue==0.99999) {qvalue=1}
results <- list("Hierarchical_levels" = (leveln+1), "Order_diversity" = qvalue, "Hill_numbers"=div.vector, "Sample_size"=N.vector, "Beta"=beta.vector)
return(results)
View(results)
div_part <- function(countable,qvalue,tree,hierarchy) {
#Quality-check and warnings
if(missing(countable)) stop("OTU table is missing")
if(is.null(dim(countable)) == TRUE) stop("The OTU table is not a matrix")
if(dim(countable)[1] < 2) stop("The OTU table only less than 2 OTUs")
if(dim(countable)[2] < 2) stop("The OTU table contains less than 2 samples")
if(sum(colSums(countable)) != ncol(countable)) {countable <- tss(countable)}
if(missing(qvalue)) stop("q value is missing")
if(qvalue < 0) stop("q value needs to be possitive (equal or higher than zero)")
if(qvalue==1) {qvalue=0.99999}
leveln <- ncol(hierarchy_table)
levels <- paste(rep("L",leveln+1),seq(1:(leveln+1)),sep="")
#Convert hierarchy columns to character
hierarchy_table <- apply(hierarchy_table,MARGIN = c(1,2), as.character)
colnames(hierarchy_table) <- levels[-length(levels)]
# Sum incidence_freq levels by level
count.tables <- list()
count.tables[[1]] <- countable
countable.sub <- countable
for(i in c(2:leveln)){
countable.sub <- merge(t(countable.sub),unique(hierarchy_table[,c(i-1,i)]), by.x="row.names",by.y=as.character(levels[i-1]))
countable.sub <- countable.sub[,-1]
countable.sub <- aggregate(subset(countable.sub, select=rownames(countable)), by=list(countable.sub[,as.character(levels[i])]), FUN=sum)
rownames(countable.sub) <- countable.sub[,1]
countable.sub <- t(countable.sub[,-1])
count.tables[[i]] <- countable.sub
}
#Generate vector of diversities at different hierarchical levels
div.vector <- c()
for (i in c(1:(leveln+1))){
if(i == 1){
#If lowest level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[1]],qvalue))
}else if(i == leveln+1){
#If highest level
div.vector <- c(div.vector,hilldiv::gamma_div(count.tables[[1]],qvalue))
}else{
#Intermediate level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[i]],qvalue))
}
}
#Name levels
names(div.vector) <- levels
#Get beta values
beta.vector <- c()
N.vector <- c()
for(b in c(1:(leveln))){
beta <- div.vector[b+1]/div.vector[b]
names(beta) <- paste("B",paste(b,b+1,sep="_"),sep="")
beta.vector <- c(beta.vector,beta)
N <- ncol(count.tables[[b]])
N.vector <- c(N.vector,N)
}
N.vector <- c(N.vector,1)
names(N.vector) <- paste(rep("N",leveln+1),seq(1:(leveln+1)),sep="")
#Return values
if (qvalue==0.99999) {qvalue=1}
results <- list("Hierarchical_levels" = (leveln+1), "Order_diversity" = qvalue, "Hill_numbers"=div.vector, "Sample_size"=N.vector, "Beta"=beta.vector)
return(results)
}
div_part(countable = test, qvalue = 0, hierarchy = hierarchy_table)
div_part <- function(countable,qvalue,tree,hierarchy) {
#Quality-check and warnings
if(missing(countable)) stop("OTU table is missing")
if(is.null(dim(countable)) == TRUE) stop("The OTU table is not a matrix")
if(dim(countable)[1] < 2) stop("The OTU table only less than 2 OTUs")
if(dim(countable)[2] < 2) stop("The OTU table contains less than 2 samples")
if(sum(colSums(countable)) != ncol(countable)) {countable <- hilldiv::tss(countable)}
if(missing(qvalue)) stop("q value is missing")
if(qvalue < 0) stop("q value needs to be possitive (equal or higher than zero)")
if(qvalue==1) {qvalue=0.99999}
leveln <- ncol(hierarchy_table)
levels <- paste(rep("L",leveln+1),seq(1:(leveln+1)),sep="")
#Convert hierarchy columns to character
hierarchy_table <- apply(hierarchy_table,MARGIN = c(1,2), as.character)
colnames(hierarchy_table) <- levels[-length(levels)]
# Sum incidence_freq levels by level
count.tables <- list()
count.tables[[1]] <- countable
countable.sub <- countable
for(i in c(2:leveln)){
countable.sub <- merge(t(countable.sub),unique(hierarchy_table[,c(i-1,i)]), by.x="row.names",by.y=as.character(levels[i-1]))
countable.sub <- countable.sub[,-1]
countable.sub <- aggregate(subset(countable.sub, select=rownames(countable)), by=list(countable.sub[,as.character(levels[i])]), FUN=sum)
rownames(countable.sub) <- countable.sub[,1]
countable.sub <- t(countable.sub[,-1])
count.tables[[i]] <- countable.sub
}
#Generate vector of diversities at different hierarchical levels
div.vector <- c()
for (i in c(1:(leveln+1))){
if(i == 1){
#If lowest level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[1]],qvalue))
}else if(i == leveln+1){
#If highest level
div.vector <- c(div.vector,hilldiv::gamma_div(count.tables[[1]],qvalue))
}else{
#Intermediate level
div.vector <- c(div.vector,hilldiv::alpha_div(count.tables[[i]],qvalue))
}
}
#Name levels
names(div.vector) <- levels
#Get beta values
beta.vector <- c()
N.vector <- c()
for(b in c(1:(leveln))){
beta <- div.vector[b+1]/div.vector[b]
names(beta) <- paste("B",paste(b,b+1,sep="_"),sep="")
beta.vector <- c(beta.vector,beta)
N <- ncol(count.tables[[b]])
N.vector <- c(N.vector,N)
}
N.vector <- c(N.vector,1)
names(N.vector) <- paste(rep("N",leveln+1),seq(1:(leveln+1)),sep="")
#Return values
if (qvalue==0.99999) {qvalue=1}
results <- list("Hierarchical_levels" = (leveln+1), "Order_diversity" = qvalue, "Hill_numbers"=div.vector, "Sample_size"=N.vector, "Beta"=beta.vector)
return(results)
}
div_part(countable = test, qvalue = 0, hierarchy = hierarchy_table)
hierarchy_table <- as.matrix(
data.frame(Sample = c("Andre", "Mascote_A1", "Mascote_A2", "Mascote_B1", "Mascote_B2"),
grouping_1 = c("A", "B", "B", "B", "B")))
div_part(countable = test, qvalue = 0, hierarchy = hierarchy_table)
